@page "/"

@using Minesweeper.Data
@inject GridService GridService

<header class="header-container">
    <div class="nav-container">
        <div class="nav-header">
            <h1 class="title">Minesweeper</h1>
        </div>
    </div>
</header>
@if (grid == null){
    <p><em>Loading...</em></p>
}
else {
    <div class="fieldContainer">
        <div class="field">
            @for (var i = 0; i < grid.GetLength(0); i++)
            {
                <div class="row">
                    @for (var j = 0; j < grid.GetLength(1); j++)
                    {
                        var cell = grid[i, j];
                        <button class="square"  @onclick="@(e => ButtonPressed(cell))">
                            @if (cell.Revealed == true){
                                switch(cell.SquareContent){
                                    case "":    <p class="info">@cell.SquareContent</p>
                                                break;
                                    case "B":   <p class="info">@cell.SquareContent</p>
                                                break;
                                    case "1":   <p class="info low">@cell.SquareContent</p>
                                                break;
                                    case "2":   <p class="info mid">@cell.SquareContent</p>
                                                break;
                                    default:    <p class="info hi">@cell.SquareContent</p>
                                                break;
                                }
                            } 
                        </button>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private Cell[,] grid;

    void ButtonPressed(Cell cell){
        cell.Revealed = true;
        if (cell.Type == BoxType.Bomb)
            Console.WriteLine($"Cell is a bomb!");
        else if (cell.Type == BoxType.Neighbour)
            Console.WriteLine($"Cell has {cell.NeighbouringBombs} bombs next to it!");
        else
            Console.WriteLine($"Cell is empty!");
    }

    protected override async Task OnInitializedAsync(){
        grid = await GridService.GetGrid();
    }
}