@page "/"

@using Minesweeper.Data
@inject GridService GridService
@inject IJSRuntime JS;

<header class="header-container">
    <div class="nav-container">
        <div class="nav-header">
            <h1 class="title">Minesweeper</h1>
        </div>
    </div>
</header>
@if (grid == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="fieldContainer">
        <div class="field">
            @for (var i = 0; i < grid.GetLength(0); i++)
            {
                <div class="row">
                    @for (var j = 0; j < grid.GetLength(1); j++)
                    {
                        var index = (i, j);
                        var cell = grid[i, j];
                        var content = cell.SquareContent;
                        <button class="square" @onclick="@(e => ButtonPressed(cell, index.i, index.j))">
                            <div class="info-container">
                                @if (cell.Revealed == true)
                                {
                                    switch (cell.SquareContent)
                                    {
                                        case "": 
                                            <p class="info revealed">@content</p>
                                            break;
                                        case "B": 
                                            <p class="info revealed bomb">@content</p>
                                            break;
                                        case "1": 
                                            <p class="info revealed low">@content</p>
                                            break;
                                        case "2": 
                                            <p class="info revealed mid">@content</p>
                                            break;
                                        default: 
                                            <p class="info revealed hi">@content</p>
                                            break;
                                    }
                                }
                            </div>
                        </button>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private Cell[,] grid;
    private List<(int i, int j)> emptyNeighbours = new();

    void ButtonPressed(Cell cell, int i, int j)
    {
        cell.Revealed = true;
        if (cell.Type == BoxType.Bomb){
            AlertPLayer("Haha du f√∂rlorade!");
            Console.WriteLine($"Cell is a bomb!");
        }
        else if (cell.Type == BoxType.Neighbour)
            Console.WriteLine($"Cell has {cell.NeighbouringBombs} bombs next to it!");
        else{
            GetEmptyNeighbours(i, j);
            Console.WriteLine($"Cell is empty!");
        }
    }

    void GetEmptyNeighbours(int i, int j){
        GridService.FindNearbyCells(ref grid, ref emptyNeighbours, i, j);

        foreach (var pair in emptyNeighbours){
            grid[pair.i, pair.j].Revealed = true;
        }
    }

    async void AlertPLayer(string msg){
        await JS.InvokeAsync<object>("ShowAlert", msg);
    }

    protected override async Task OnInitializedAsync()
    {
        grid = await GridService.GetGrid();
    }
}